Split output files into tmp/LIN, tmp/EML etc.
Should not be possible that LIN->LIN generates session errors.
Check the output matrix for general consistency.

Buffer: 
* Move dispatch to this buffer as well (readFormatted etc)
* Can move buffer init and reserve out of file*.cpp

In dispatch
* Move from map in fileRBN and fileLIN to manual search?
* Move detailed parsing down into classes?

When multi-threading, exceptions still go to stdout?
Maybe put errors to cerr.

Print examples of each problem (small or large).

Check that there is never > 1 segment in RP files.

Tools
- cppclean
- doxygen including dot
- include-what-you-use
- clang static analyzer

Add g++ makefile for Ubuntu
Try the g++ trick to get unused methods
Update makefiles (file lists)

Add == comparison (read written file back into, compare groups as ==)

Use raw strings for regexes?

Remove LIN_EXT

Parse VG LIN headers for some recognizable format.

options
-------
-b "binary compare", write to temp file, read back in, check ==

-S stats on lengths
-N name file

-A analyse DD
-p play analyze DD

Then write a script to set combinations

Auction:
Include alerts =1= I think.

Read into BBO.exe

grep TODO *.cpp *.h
grep assert

make Board checks

Test on concatenated RBN file

Support PBN ##

Generate stats on all sizes needed for database, incl #cards per play

Should somehow recognize complete duplicates

Valuation
---------
Board: Valuation

Double-dummy
------------

* Tableau: Call DDS
* Trace: 
  - (1) old trace, can count mistakes
  - (2) new trace, can compare within suit and between suits,
    probably friend of Deal.  Need new DDS function?

How to multi-thread the DDS calls?
Threads consume single boards from segments (all instances).

Database
--------

Be able to store
- Play trace, including error types
- Hand to open bidding (0-4)
- board display number, can check dealer/vul then
- Files, Dirs (or combine?)
- Systems, and some characteristics
- Defenses, and some characteristics

Generate each of the tables in an sqlite DB as txt

Ingest them into sqlite in a separate program

some kind of "make" ("scour") looks for new or changed files.
Output proposed deltas to DB

Syntax for .bsf files
---------------------
(Bridge script files)
player alias "Display,Last,First" "Display"
select segment "segment"
unselect segment
postpone (rerun in the end, e.g. for partner counts)
select board 7
(stuff to do with the selected board, e.g. contract)
Actually, make it sql-like
