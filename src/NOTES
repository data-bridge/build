* Move Options to write none, basic or all (3 levels)
* .fix should no longer be needed, or needed as much?
  - Rerun RPmajors
  - No more writing in validateLIN
* Clean up code in validateLIN and dispatch
* Add skip keyword to .ref (skips whole file)
* Add 10-19 delete (or skip) to skip lines
* Then get rid of .orig files
* Get RPmajors to run with -s and -c as well
  - EML missing contract has to be a .fix-type input
  - Maybe .ref has an augment keyword as well /(by chunk or
    board number or something like that)
  - So
    insert (-> add) line number ""
    replace (-> change) line number ""
    delete line number1 line number2
    skip (entire file)
    augment bno instNo|open|closed "Contract" "value"
    But how to get augmented data into readChunk?



* appendFile should keep stuff in order and not duplicative
* Have a script that picks up ../../.. file by argument

Likely order:
* Ditto for files with only North,West etc.
* Ditto for files with only md||
* Turn off speculative file writers
* Run reader

LIN_VG:
* Cases of trick differences
  + DD agrees with contract -- fix mc claim
  + Play is over -- must somehow fix contract
  + DD agrees with mc -- must somehow fix contract
  - DD agrees with neither -- what to do?
  - Maybe one or the other is no longer reachable

Difference in declarer/denomination
* Same denom
  - Partner (N/S, E/W): Fix declarer
  - Not partner: Flag, probably auction is wrong
* Different denom, same declarer
  - Check auction manually, maybe typo
* Both different
  - Check manually

Find the occasional segfault
            #qx
LIN_VG  948,965
LIN_RP   80,138
LIN     ~ 9,399 incl TRN
JEC      23,045

validate:
* Print example for each "error"

update Pavlicek missive and Excel

write a readLINChunk that utilizes lineData structure
except for LIN_RP.

Move all file*cpp to lno = lineData.lno,
then move printed line interval to actual lno's.

Make prettier line break in LIN print except LIN_RP.

No % comment in LIN except LIN_RP.

Functionality
-------------
JEC PBN
- support ##
- Find way to ignore OptimumResult
LIN VG
- Include alerts in RBN
- Parse headers for semantic content
LIN shein
LIN tourneys

LIN as it is now, and modified Buffer

Test on concatenated RBN file

Add ability to store optimal results from PBN.

options
-------
-A analyse DD
-p play analyze DD
-n output all names to appropriately named text files

Makefiles
---------
        compile runs    threads
-------------------------------
visual  yes     yes     yes
cygwin  yes     segf
mingw   almost
clang
ubuntu

Valuation
---------
Board: Valuation

Double-dummy
------------
* Tableau: Call DDS
* Trace: 
  - (1) old trace, can count mistakes
  - (2) new trace, can compare within suit and between suits,
    probably friend of Deal.  Need new DDS function?

How to multi-thread the DDS calls?
Threads consume single boards from segments (all instances).

Database
--------
Be able to store
- Play trace, including error types
- Hand to open bidding (0-4)
- board display number, can check dealer/vul then
- Files, Dirs (or combine?)
- Systems, and some characteristics
- Defenses, and some characteristics

Generate each of the tables in an sqlite DB as txt

Ingest them into sqlite in a separate program

some kind of "make" ("scour") looks for new or changed files.
Output proposed deltas to DB

Find a way to normalize all important text fields.

Should somehow recognize complete duplicates.

Syntax for .bsf files
---------------------
(Bridge script files)
player alias "Display,Last,First" "Display"
select segment "segment"
unselect segment
postpone (rerun in the end, e.g. for partner counts)
select board 7
(stuff to do with the selected board, e.g. contract)
Actually, make it sql-like
