Auction: RBN auction starts with dealer and vul.
Pack these up as well?

Auction:
If we SetScore, then must check against CalculateScore (order?).
Include alerts =1= I think.
Contract:
Probably SetDeclarer gets called after auction (order)?  check vs auction
Play:
Write AddAllPBN(list).

Use ParsePlayer instead of e.g. Auction::ParseRBNDealer()


Clean up code again in the end, delete unused functions etc.


Pavlicek notes
--------------
What is the number of records.  It seems to be #hands * 2 + 1 -- why +1?
PBN generation
* Play: omitted card is -, not -- (PBN standard v2.1, section 3.6)
* Play: "The play ends after 13 tricks, or with *."  So no asterisk.
* Play.cpp around line 650, AsPBN()

grep TODO *.cpp *.h
grep assert

Contract: There are too many Set functions, probably some unused

Unit test:
Think of having expected result
Count pass/fail

make Board checks

Test on concatenated RBN file
come up with format for accompanying fixes, .fix files
Read these in, apply before crying wolf

Add options.cpp to control reading and writing
Test on all RBN files
Maybe input list of files, output list of faulty unfixed files

Write parser for RP's LIN
Write LIN writer
Test

Write parser for RP's PBN
Support ##
Write PBN writer
Support ##
Test

Write parser for RP's TXT
Write TXT writer
Test

Extend to RBX (like RBN)

Test on "real" PBN

Test on my LIN

Test on VG LIN

Write EML
Write REC
Read EML
Read REC

Generate stats on all sizes needed for database, incl #cards per play

Look at iterators: (1) auto, (2) it-> instead of new lookup?

Should somehow recognize complete duplicates

Tableau: Call DDS
Trace: (1) old trace, can count mistakes
(2) new trace, can compare within suit and between suits,
probably friend of Deal.  Need new DDS function?

Board: Valuation

Be able to store
- Play trace, including error types
- Hand to open bidding (0-4)
- board display number, can check dealer/vul then
- Files, Dirs (or combine?)
- Systems, and some characteristics
- Defenses, and some characteristics

How to multi-thread the DDS calls?
Threads consume single boards from segments (all instances).

Generate each of the tables in an sqlite DB as txt

Ingest them into sqlite in a separate program

some kind of "make" ("scour") looks for new or changed files.
Output proposed deltas to DB


Syntax for .bsf files
---------------------
(Bridge script files)
player alias "Display,Last,First" "Display"
select segment "segment"
unselect segment
postpone (rerun in the end, e.g. for partner counts)
select board 7
(stuff to do with the selected board, e.g. contract)
Actually, make it sql-like
