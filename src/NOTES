Put the fix file into a class?

TXT header lines: Should compare these better.

Eliminate valint.h?

08.10.16
--------
Maybe put errors to cerr.

Move increasingly to .fix and away from validate "fixes"

Check that there is never > 1 segment.


02.10.16
--------
Code cleanup
- camelCase
- no globals
- throws
- no dead code

Tools
- cppclean
- doxygen including dot
- include-what-you-use
- clang static analyzer

Add g++ makefile for Ubuntu
Try the g++ trick to get unused methods
Update makefiles (file lists)

Add automated comparisons of results

Use raw strings for regexes?

In diff, regex out the % numbers and then compare the whole remaining line


There is probably a fifth LIN output format with my %%%% headers.
LIN_EXT or so.  In this case take advantage of file names too 
(tournament name, date).

Parse VG LIN headers for some recognizable format.


Maybe combine the enum and the string on top of each file*.cpp

options
-------
-b "binary compare", write to temp file, read back in, check ==

-S stats on lengths
-N name file
-g generate suggestions for new tables

-A analyse DD
-p play analyze DD


Then write a script to set combinations

Auction:
Include alerts =1= I think.

Use ParsePlayer instead of e.g. Auction::ParseRBNDealer()

Read into BBO.exe

grep TODO *.cpp *.h
grep assert

make Board checks

Test on concatenated RBN file
come up with format for accompanying fixes, .fix files
Read these in, apply before crying wolf

Support PBN ##

Generate stats on all sizes needed for database, incl #cards per play

Look at iterators: (1) auto, (2) it-> instead of new lookup?

Should somehow recognize complete duplicates

Tableau: Call DDS
Trace: (1) old trace, can count mistakes
(2) new trace, can compare within suit and between suits,
probably friend of Deal.  Need new DDS function?

Board: Valuation

Be able to store
- Play trace, including error types
- Hand to open bidding (0-4)
- board display number, can check dealer/vul then
- Files, Dirs (or combine?)
- Systems, and some characteristics
- Defenses, and some characteristics

How to multi-thread the DDS calls?
Threads consume single boards from segments (all instances).

Generate each of the tables in an sqlite DB as txt

Ingest them into sqlite in a separate program

some kind of "make" ("scour") looks for new or changed files.
Output proposed deltas to DB


Syntax for .bsf files
---------------------
(Bridge script files)
player alias "Display,Last,First" "Display"
select segment "segment"
unselect segment
postpone (rerun in the end, e.g. for partner counts)
select board 7
(stuff to do with the selected board, e.g. contract)
Actually, make it sql-like
