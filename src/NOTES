27.09.16
--------
Can we get rid of static data as much as possible?
cppclean
doxygen including dot
include-what-you-use

Add automated comparisons of results


There is probably a fifth LIN output format with my %%%% headers.
LIN_EXT or so.  In this case take advantage of file names too 
(tournament name, date).

Parse VG LIN headers for some recognizable format.


Check that LOG is only set at the lowest level where error occurs.
In read*, we should perhaps add the input file line number.

Maybe combine the enum and the string on top of each file*.cpp

Actually a lot of the pointed-to functions are the same.  Maybe unify?

options
-------
-i file, single input file
-I dir, all files with readable endings in dir
mutually exclusive

-o file, single output file, goes with -i
-O dir, same as input format if no -f

-f output format (controls -O, -b, -c)

-b "binary compare", write to temp file, read back in, check ==
-c compare, write to temp file, do a diff either with self or with
 other file already present with appropriate name

-l log file for all differences
 think about diffs (eml -> rbn will not have T, L, E, ... recognize?)

-T timer
-h hint file(s) in input directory, make these
(existing hints are read in automatically)

-S stats on lengths
-N name file
-g generate suggestions for new tables

-A analyse DD
-p play analyze DD

-n #cores for splitting up multiple files

-v verbose (1, 2, 4, 8?)


Then write a script to set combinations
Then work on combining formats

Thoughts on combining the formats
---------------------------------
RBN, PBN, LIN, PBX
sequential formats
* Have an overall read function, 
* Pass in the name of the readChunk function,
* Pass in array of function pointers,
* Pass in length of array (or it's a vector<>),
* TryMethod is also generic?
* Pass in the dividing line between segment and board functions

TXT, REC, PBN
* Canvas formats
* Open and closed may be different
* 


Auction:
If we SetScore, then must check against CalculateScore (order?).
Include alerts =1= I think.
Contract:
Probably SetDeclarer gets called after auction (order)?  check vs auction
Play:
Write AddAllPBN(list).

Use ParsePlayer instead of e.g. Auction::ParseRBNDealer()


Clean up code again in the end, delete unused functions etc.
doxygen?
Upper and lower case of function names and constants (camelCase?)

Read into BBO.exe


grep TODO *.cpp *.h
grep assert

Contract: There are too many Set functions, probably some unused

Unit test:
Think of having expected result
Count pass/fail

make Board checks

Test on concatenated RBN file
come up with format for accompanying fixes, .fix files
Read these in, apply before crying wolf

Add options.cpp to control reading and writing
Test on all RBN files
Maybe input list of files, output list of faulty unfixed files

Support PBN ##

Generate stats on all sizes needed for database, incl #cards per play

Look at iterators: (1) auto, (2) it-> instead of new lookup?

Should somehow recognize complete duplicates

Tableau: Call DDS
Trace: (1) old trace, can count mistakes
(2) new trace, can compare within suit and between suits,
probably friend of Deal.  Need new DDS function?

Board: Valuation

Be able to store
- Play trace, including error types
- Hand to open bidding (0-4)
- board display number, can check dealer/vul then
- Files, Dirs (or combine?)
- Systems, and some characteristics
- Defenses, and some characteristics

How to multi-thread the DDS calls?
Threads consume single boards from segments (all instances).

Generate each of the tables in an sqlite DB as txt

Ingest them into sqlite in a separate program

some kind of "make" ("scour") looks for new or changed files.
Output proposed deltas to DB


Syntax for .bsf files
---------------------
(Bridge script files)
player alias "Display,Last,First" "Display"
select segment "segment"
unselect segment
postpone (rerun in the end, e.g. for partner counts)
select board 7
(stuff to do with the selected board, e.g. contract)
Actually, make it sql-like
